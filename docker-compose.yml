version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: ai-qa-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: ai_qa_system
      MYSQL_USER: aiqa
      MYSQL_PASSWORD: aiqa123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend-services/user-service/src/main/resources/sql:/docker-entrypoint-initdb.d
    networks:
      - ai-qa-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
  nacos:
    image: nacos/nacos-server:v3.1.0
    container_name: ai-qa-nacos
    environment:
      - MODE=standalone  # 单机模式（生产环境需调整为集群）
      - NACOS_AUTH_TOKEN=VGhpc0lzTXlDdXN0b21TZWNyZXRLZXkwMTIzNDU2Nzg=
      - NACOS_AUTH_IDENTITY_KEY=nacos
      - NACOS_AUTH_IDENTITY_VALUE=nacos
    ports:
      - "8080:8080"
      - "8848:8848"  # Nacos 默认端口
      - "9848:9848"
    networks:
      - ai-qa-network
    healthcheck:
      # 健康检查：确保 Nacos 接口可访问，才视为就绪
      test: ["CMD", "curl", "-f", "http://localhost:8848/nacos/v1/console/health/readiness"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 用户服务
  user-service:
    image: wangxlisonglm/ai-qa-user-service:latest
    # build:
    #   context: ./backend-services/user-service
    #   dockerfile: Dockerfile
    container_name: ai-qa-user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/ai_qa_system?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: aiqa
      SPRING_DATASOURCE_PASSWORD: aiqa123
    ports:
      - "9999:9999"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ai-qa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 问答服务
  qa-service:
    image: wangxlisonglm/ai-qa-qa-service:latest
    # build:
    #   context: ./backend-services/qa-service
    #   dockerfile: Dockerfile
    container_name: ai-qa-qa-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/ai_qa_system?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: aiqa
      SPRING_DATASOURCE_PASSWORD: aiqa123
      USER_SERVICE_URL: http://user-service:9999
    ports:
      - "6666:6666"
    depends_on:
      mysql:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - ai-qa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API网关
  api-gateway:
    image: wangxlisonglm/ai-qa-api-gateway:latest
    # build:
    #   context: ./backend-services/api-gateway
    #   dockerfile: Dockerfile
    container_name: ai-qa-api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      USER_SERVICE_URL: http://user-service:9999
      QA_SERVICE_URL: http://qa-service:6666
    ports:
      - "8888:8888"
    depends_on:
      user-service:
        condition: service_healthy
      qa-service:
        condition: service_healthy
    networks:
      - ai-qa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端应用
  # 前端依赖的PostgreSQL数据库（新增）
  postgres:
    image: postgres:16-alpine
    container_name: ai-qa-frontend-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-aiqa_front}  # 前端数据库用户
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aiqa_front123}  # 前端数据库密码
      POSTGRES_DB: ${POSTGRES_DB:-ai_qa_frontend}  # 前端数据库名
    ports:
      - "5432:5432"  # 暴露端口供本地调试（可选）
    volumes:
      - postgres_data:/var/lib/postgresql/data  # 持久化数据
    networks:
      - frontend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aiqa_front}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 前端依赖的Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ai-qa-frontend-redis
    ports:
      - "6379:6379"  # 暴露端口供本地调试（可选）
    volumes:
      - redis_data:/data  # 持久化数据
    networks:
      - frontend-network
    command: redis-server --appendonly yes  # 开启AOF持久化
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 前端应用（独立运行）
  frontend:
    image: wangxlisonglm/ai-qa-frontend:latest
    # build:
    #   context: ./frontend/ai-chatbot  # 修正前端代码路径（原路径为./frontend，需指向实际代码目录）
    #   dockerfile: Dockerfile
    container_name: ai-qa-frontend
    environment:
      AUTH_SECRET: a7f2d4e8b1c93567284091536789024578901234567890123456789012345678
      DEEPSEEK_API_KEY: sk-ad6256b746a44e5597f33eab18e5d967
      # 前端数据库连接URL（容器内访问PostgreSQL）
      POSTGRES_URL: postgresql://${POSTGRES_USER:-aiqa_front}:${POSTGRES_PASSWORD:-aiqa_front123}@postgres:5432/${POSTGRES_DB:-ai_qa_frontend}
      # 前端Redis连接URL（容器内访问Redis）
      REDIS_URL: redis://redis:6379
      # 若前端无需调用后端API，可移除或注释该变量
      # NEXT_PUBLIC_API_BASE_URL: http://api-gateway:8080
    ports:
      - "3000:3000"  # 前端访问端口
    depends_on:
      postgres:
        condition: service_healthy  # 等待PostgreSQL就绪
      redis:
        condition: service_healthy  # 等待Redis就绪
    networks:
      - frontend-network

volumes:
  postgres_data:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-qa-network:
    driver: bridge
  frontend-network:
    driver: bridge
